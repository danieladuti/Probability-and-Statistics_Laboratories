#exI.2
parabola_arie = function(N) {
  N_C = 0
  for(i in 1:N) {
    x = runif(1, 0, 2)
    y = runif(1, 0, 2)
    if(y <= -2*x^2 + 5*x - 2) {
      N_C = N_C + 1
    }
  }
  area_rectangle = 2 * 2
  return(area_rectangle * N_C / N)
}

N = 10000
area_estimate = parabola_arie(N)
f = function(x) {
  -2*x^2 + 5*x - 2
}
exact_area = integrate(f, 0, 2)$value
epsilon_abs = abs(area_estimate - exact_area)
epsilon_rel = abs(area_estimate - exact_area) / abs(exact_area)
epsilon_per = epsilon_rel * 100
print(area_estimate)
print(exact_area)
print(epsilon_abs)
print(epsilon_rel)
print(epsilon_per)




#exII.1.b
MC_integration = function(N) {
  sum = 0;
  for(i in 1:N) {
    u = runif(1, 0, 4);
    sum = sum + exp(u);
  }
  return(4*sum/N);
}

abs_err = abs(MC_integration(20000)-51.87987)
rel_err = abs_err/51.87987
print(abs_err)
print(rel_err)



#exII.1.d
MC_integration = function(N) {
  sum = 0;
  for(i in 1:N) {
    x = rexp(1,1);
    sum = sum + 1/(4*x*x - 1);
  }
  return(sum/N);
}

abs_err = abs(MC_integration(100000)-log(3/4))
rel_err = abs_err/(log(3/4))
print(abs_err)
print(rel_err)




#exII.2
MC_improved_integration = function(N) {
  sum = 0;
  for(i in 1:N) {
    u = rexp(1, 3);
    sum = sum + exp(-u*u*2)/exp(-u*3);
  }
  return(sum/N);
}

MC_imprvd_integr_average = function(k, N) {
  estimates = 0;
  for(i in 1:k)
    estimates[i] = MC_improved_integration(N);
  print(mean(estimates));
  print(sd(estimates));
}

MC_imprvd_integr_average(30, 50000)





#exIII.2
generate_service_time = function(lambda) {
  return(rexp(1, lambda))
}

MC_mean_service_time = function(N, lambda) {
  total_time = 0
  for(i in 1:N) {
    if(runif(1) <= 0.75) {  #primul mecanic
      total_time = total_time + generate_service_time(lambda)
    } else {
      total_time = total_time + generate_service_time(lambda * 3)  #al doilea mecanic
    }
  }
  return(total_time/N)
}

lambda_primul_mecanic = 4
media_primul_mecanic = MC_mean_service_time(10000, lambda_primul_mecanic)
print(media_primul_mecanic)
lambda_al_doilea_mecanic = 12
media_al_doilea_mecanic = MC_mean_service_time(10000, lambda_al_doilea_mecanic)
print(media_al_doilea_mecanic)





#exIV.2
#a
Nr_days = function() {
  nr_days = 2
  last_errors = c(4,6,8,10)
  nr_errors = 4
  while(nr_errors > 0) {
    lambda=min(last_errors)
    nr_errors = rpois(1, lambda)
    last_errors = c(nr_errors, last_errors[1:2])
    nr_days = nr_days + 1
  }
  return(nr_days)
}

MC_nr_days_all_infected = function(N) {
  s = 0
  for(i in 1:N) {
    if(Nr_days() > 21) {
      s = s + 1
    }
  }
  return(s/N)
}

for(k in c(4, 6, 8, 10)) {
  prob_all_infected = MC_nr_days_all_infected(5000)
  print(prob_all_infected)
}



#b
MC_nr_days_at_least_15_infected = function(N) {
  s = 0
  for(i in 1:N) {
    if(Nr_days() >= 15) {
      s = s + 1
    }
  }
  return(s/N)
}

for(k in c(4, 6, 8, 10)) {
  prob_at_least_15_infected = MC_nr_days_at_least_15_infected(5000)
  print(prob_at_least_15_infected)
}



#c
MC_estimated_probability = function(epsilon, alpha, k) {
  z = qnorm(alpha / 2)
  p = MC_nr_days_at_least_15_infected(k)
  N_min = p * (1 - p) * (z / epsilon)^2
  return(ceiling(N_min))
}

epsilon <- 0.01
alpha <- 1 - 0.95
for(k in c(4, 6, 8, 10)) {
  print(epsilon)
  print(MC_estimated_probability(epsilon, alpha, k))
}




